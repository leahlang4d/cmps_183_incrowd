(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> id() takes exactly one argument (0 given)"
p3
sS'layer'
p4
S'C:\\Users\\Adrian Salguero\\web2py\\applications\\Project\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\n\ndef get_user_name_from_email(email):\n    """Returns a string corresponding to the user first and last names,\n    given the user email."""\n    u = db(db.auth_user.email == email).select().first()\n    if u is None:\n        return \'None\'\n    else:\n        return \' \'.join([u.first_name, u.last_name])\n\n\ndef index():\n    """\n    This is your main controller.\n    """\n    # I am creating a bogus list here, just to have some divs appear in the\n    # view.  You need to read at most 20 posts from the database, in order of\n    # most recent first, and you need to return that list here.\n    # Note that posts is NOT a list of strings in your actual code; it is\n    # what you get from a db(...).select(...).\n    #posts = [\'banana\', \'pear\', \'eggplant\']\n    return dict(posts=db().select(orderby=~db.intern.upload), author = get_user_name_from_email)\n\n\n@auth.requires_login()\ndef edit_internship():\n    """\n    This is the page to create / edit / delete a post.\n    """\n\n    if request.args(0) is None:\n        form_type = \'create\'\n        form = SQLFORM(db.intern)\n\n    else:\n        q = ((db.intern.uploader == auth.user.email)&\n             (db.intern.id == request.args(0)))\n        cl = db(q).select().first()\n        if cl is None:\n            session.flash = T(\'Not Authorized\')\n            redirect(URL(\'default\',\'index\'))\n\n        is_edit = (request.vars.edit == \'true\')\n        form_type = \'edit\' if is_edit else \'view\'\n        form = SQLFORM(db.intern, record=cl, deletable=True, readonly=not True)\n\n    button_list = []\n    if form_type == \'edit\':\n        button_list.append(A(\'Cancel\', _class=\'btn btn-warning\',\n                             _href=URL(\'default\', \'edit_internship\', args=[cl.id])))\n    elif form_type == \'create\':\n        button_list.append(A(\'Cancel\', _class=\'btn btn-warning\',\n                             _href=URL(\'default\', \'index\')))\n    elif form_type == \'view\':\n        #button_list.append(A(\'Edit\', _class=\'btn btn-warning\',\n         #                    _href=URL(\'default\', \'edit_internship\', args=[cl.id], vars=dict(edit=\'true\'))))\n        button_list.append(A(\'Back\', _class=\'btn btn-primary\',\n                             _href=URL(\'default\', \'index\')))\n    if form.process().accepted:\n        if form_type == \'create\':\n            session.flash = T(\'Internship added.\')\n        else:\n            session.flash = T(\'Internship edited.\')\n        redirect(URL(\'default\', \'index\'))\n    elif form.errors:\n        session.flash = T(\'Please enter correct values.\')\n\n    return dict(form=form, button_list=button_list)\n\n@auth.requires_login()\ndef view_internship():\n    """\n    This is the page to create / edit / delete a post.\n    """\n\n    if request.args(0) is None:\n        redirect(URL(\'default\', \'index\'))\n\n    else:\n        q = ((db.intern.uploader == auth.user.email)&\n             (db.intern.id == request.args(0)))\n        cl = db(q).select().first()\n        if cl is None:\n            session.flash = T(\'Not Authorized\')\n            redirect(URL(\'default\',\'index\'))\n\n        is_edit = (request.vars.edit == \'true\')\n        form_type = \'view\'\n        form = SQLFORM(db.intern, record=cl, deletable=False, readonly=not False)\n\n    button_list = []\n    if form_type == \'edit\':\n        button_list.append(A(\'Cancel\', _class=\'btn btn-warning\',\n                             _href=URL(\'default\', \'edit_internship\', args=[cl.id])))\n    elif form_type == \'create\':\n        button_list.append(A(\'Cancel\', _class=\'btn btn-warning\',\n                             _href=URL(\'default\', \'index\')))\n    elif form_type == \'view\':\n        #button_list.append(A(\'Edit\', _class=\'btn btn-warning\',\n         #                    _href=URL(\'default\', \'edit_internship\', args=[cl.id], vars=dict(edit=\'true\'))))\n        button_list.append(A(\'Back\', _class=\'btn btn-primary\',\n                             _href=URL(\'default\', \'index\')))\n    if form.process().accepted:\n        if form_type == \'create\':\n            session.flash = T(\'Internship added.\')\n        else:\n            session.flash = T(\'Internship edited.\')\n        redirect(URL(\'default\', \'index\'))\n    elif form.errors:\n        session.flash = T(\'Please enter correct values.\')\n\n    return dict(form=form, button_list=button_list, post=db.intern(db.intern.id == id))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\nresponse._vars=response._caller(view_internship)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\Adrian Salguero\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\Adrian Salguero\\web2py\\applications\\Project\\controllers/default.py", line 160, in <module>\n  File "C:\\Users\\Adrian Salguero\\web2py\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\Adrian Salguero\\web2py\\gluon\\tools.py", line 4241, in f\n    return action(*a, **b)\n  File "C:\\Users\\Adrian Salguero\\web2py\\applications\\Project\\controllers/default.py", line 121, in view_internship\n    return dict(form=form, button_list=button_list, post=db.intern(db.intern.id == id))\n  File "C:\\Users\\Adrian Salguero\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 527, in __call__\n    orderby_on_limitby=False).first()\n  File "C:\\Users\\Adrian Salguero\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "C:\\Users\\Adrian Salguero\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "C:\\Users\\Adrian Salguero\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "C:\\Users\\Adrian Salguero\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "C:\\Users\\Adrian Salguero\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "C:\\Users\\Adrian Salguero\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "C:\\Users\\Adrian Salguero\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "C:\\Users\\Adrian Salguero\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1396, in represent\n    obj = obj()\nTypeError: id() takes exactly one argument (0 given)\n'
p11
s.