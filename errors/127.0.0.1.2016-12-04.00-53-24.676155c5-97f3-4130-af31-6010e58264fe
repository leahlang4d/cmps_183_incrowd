(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'images'"
p3
sS'layer'
p4
S'/mnt/c/Users/Andy Espejo/Documents/School/CS183/web2py/applications/cmps_183_incrowd/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\n\n# Start of a calender implantation modified from python.about.com\n\nimport re, datetime, calendar\n\nyear = [\'January\',\n        \'February\'\n        \'March\',\n        \'April\',\n        \'May\',\n        \'June\',\n        \'July\',\n        \'August\',\n        \'September\',\n        \'October\',\n        \'November\',\n        \'December\']\n\ndef get_user_name_from_email(email):\n    """Returns a string corresponding to the user first and last names,\n    given the user email."""\n    u = db(db.auth_user.email == email).select().first()\n    if u is None:\n        return \'None\'\n    else:\n        return \' \'.join([u.first_name, u.last_name])\n\n\ndef index():\n     """\n     This is your main controller.\n     """\n    # I am creating a bogus list here, just to have some divs appear in the\n    # view.  You need to read at most 20 posts from the database, in order of\n    # most recent first, and you need to return that list here.\n    # Note that posts is NOT a list of strings in your actual code; it is\n    # what you get from a db(...).select(...).\n    # posts = [\'banana\', \'pear\', \'eggplant\']\n     return dict(posts=db().select(orderby=~db.intern.upload), author = get_user_name_from_email,\n                favs=db().select(orderby=~db.fav.upload), inProg=db().select(orderby=~db.inProg.upload))\n@auth.requires_login()\ndef calender():\n    # Sets today equal to  year-month-date, then separates the three values\n    today = datetime.datetime.date(datetime.datetime.now())\n\n    current = re.split(\'-\', str(today))\n    todayNo = int(current[1])\n    todayMonth = year[todayNo - 2]\n    todayDay = int(re.sub(\'\\A0\', \'\', current[2]))  # Date time returns 2 digit number, but we want 1 digit for 1-9\n    todayYear = int(current[0])\n    month = calendar.monthcalendar(todayYear, todayNo)\n    nWeeks = len(month)\n\n    week = None\n    day = None\n\n    # Loads in calender content from the database\n    dateContent = db(db.dateContent).select()\n    return dict(todayMonth=todayMonth, todayYear=todayYear, todayDay=todayDay, nWeeks=nWeeks, month=month,\n                dateContent=dateContent)\n\n\n@auth.requires_login()\ndef add():\n    # This implements the ability to add events to calender dates\n    date = request.args(0)\n    db.dateContent.dateDay.default = date\n    form = SQLFORM(db.dateContent)\n\n    if form.process().accepted:\n        session.flash = T(\'Event Created!\')\n        redirect(URL(\'default\', \'index\'))\n    return dict(form=form)\n\n\n@auth.requires_login()\ndef edit_internship():\n    """\n    This is the page to create / edit / delete a post.\n    """\n\n    if request.args(0) is None:\n        form_type = \'create\'\n        form = SQLFORM(db.intern)\n\n    else:\n        q = ((db.intern.uploader == auth.user.email)&\n             (db.intern.id == request.args(0)))\n        cl = db(q).select().first()\n        if cl is None:\n            session.flash = T(\'Not Authorized\')\n            redirect(URL(\'default\',\'index\'))\n\n        is_edit = (request.vars.edit == \'true\')\n        form_type = \'edit\' if is_edit else \'view\'\n        form = SQLFORM(db.intern, record=cl, deletable=True, readonly=not True)\n\n    button_list = []\n    if form_type == \'edit\':\n        button_list.append(A(\'Cancel\', _class=\'btn btn-warning\',\n                             _href=URL(\'default\', \'edit_internship\', args=[cl.id])))\n    elif form_type == \'create\':\n        button_list.append(A(\'Cancel\', _class=\'btn btn-warning\',\n                             _href=URL(\'default\', \'index\')))\n    elif form_type == \'view\':\n        #button_list.append(A(\'Edit\', _class=\'btn btn-warning\',\n         #                    _href=URL(\'default\', \'edit_internship\', args=[cl.id], vars=dict(edit=\'true\'))))\n        button_list.append(A(\'Back\', _class=\'btn btn-primary\',\n                             _href=URL(\'default\', \'index\')))\n    if form.process().accepted:\n        if form_type == \'create\':\n            session.flash = T(\'Internship added.\')\n        else:\n            session.flash = T(\'Internship edited.\')\n        redirect(URL(\'default\', \'index\'))\n    elif form.errors:\n        session.flash = T(\'Please enter correct values.\')\n\n    return dict(form=form, button_list=button_list)\n\n\ndef view_internship():\n    """\n    This is the page to view the internship information\n    """\n\n\n    if request.args(0) is None:\n        redirect(URL(\'default\', \'index\'))\n\n    #else:\n    q = (db.intern.id == request.args(0))\n    cl = db(q).select().first()\n\n    is_edit = (request.vars.edit == \'true\')\n    form_type = \'view\'\n    form = SQLFORM(db.intern, record=cl, deletable=False, readonly=not False)\n\n    button_list = []\n    if form_type == \'edit\':\n        button_list.append(A(\'Cancel\', _class=\'btn btn-warning\',\n                             _href=URL(\'default\', \'edit_internship\', args=[cl.id])))\n    elif form_type == \'create\':\n        button_list.append(A(\'Cancel\', _class=\'btn btn-warning\',\n                             _href=URL(\'default\', \'index\')))\n    elif form_type == \'view\':\n        #button_list.append(A(\'Edit\', _class=\'btn btn-warning\',\n         #                    _href=URL(\'default\', \'edit_internship\', args=[cl.id], vars=dict(edit=\'true\'))))\n        button_list.append(A(\'Back\', _class=\'btn btn-primary\',\n                             _href=URL(\'default\', \'index\')))\n    if form.process().accepted:\n        if form_type == \'create\':\n            session.flash = T(\'Internship added.\')\n        else:\n            session.flash = T(\'Internship edited.\')\n        redirect(URL(\'default\', \'index\'))\n    elif form.errors:\n        session.flash = T(\'Please enter correct values.\')\n\n    return dict(form=form, button_list=button_list, post=db(db.intern.id == request.args(0)).select().first())\n\n\ndef add_fav():\n    id = request.args(0)\n    db.fav.insert(title=db.intern(id).title, organization=db.intern(id).organization)\n    response.flash = "Added to Favorites"\n    return True\n\ndef add_inProg():\n    id = request.args(0)\n    db.fav.insert(title=db.intern(id).title, organization=db.intern(id).organization)\n    response.flash = "Added to Favorites"\n    return True\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(view_internship)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/mnt/c/Users/Andy Espejo/Documents/School/CS183/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/mnt/c/Users/Andy Espejo/Documents/School/CS183/web2py/applications/cmps_183_incrowd/controllers/default.py", line 224, in <module>\n  File "/mnt/c/Users/Andy Espejo/Documents/School/CS183/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/mnt/c/Users/Andy Espejo/Documents/School/CS183/web2py/applications/cmps_183_incrowd/controllers/default.py", line 142, in view_internship\n    cl = db(q).select().first()\n  File "/mnt/c/Users/Andy Espejo/Documents/School/CS183/web2py/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/mnt/c/Users/Andy Espejo/Documents/School/CS183/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/mnt/c/Users/Andy Espejo/Documents/School/CS183/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "/mnt/c/Users/Andy Espejo/Documents/School/CS183/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/mnt/c/Users/Andy Espejo/Documents/School/CS183/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/mnt/c/Users/Andy Espejo/Documents/School/CS183/web2py/gluon/packages/dal/pydal/adapters/base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "/mnt/c/Users/Andy Espejo/Documents/School/CS183/web2py/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/mnt/c/Users/Andy Espejo/Documents/School/CS183/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1435, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'images\'\n'
p11
s.